qonfig('log', '2');

fq printBoard ~(board {
	console:writeln(" 1 2 3 4 5 6 7 ");
	console:writeln("---------------");
	*~ r <~ 0;
	*~ c <~ 0;
	loop(r < board:len) {
		console:write(' ');
		loop(c < board:r:len) {
			*~ tempRow <~ board:r;
			console:write(tempRow:c + ' ');
			c <~ c + 1;
		}
		c <~ 0;
		console:writeln('');
		r <~ r + 1;
	}

	console:writeln("---------------");
	console:writeln(" 1 2 3 4 5 6 7 ");
});

fq dropInBoard ~(board column symbol {
	*~ r <~ board:len - 1;
	*~ c <~ 0;
	loop(r >= 0) {
		*~ tempRow <~ board:r;
		if(tempRow:column == ' ') {
			tempRow:column <~ symbol;
			r <~ 0;
			return board;
		}
		r <~ r - 1;
	}
	return board;
});

fq checkIfWon ~(board symbol playerId {
	*~ r <~ 0;
	*~ c <~ 0;
	*~ count <~ 0;
	*~ rows <~ board:len;
	~? (rows < 1) {
		return -1;
	}
	*~ tempRow <~ board:0;
	*~ columns <~ tempRow:len;
	# horizontal
	loop(r < rows) {
		tempRow <~ board:r;
		loop(c < columns) {
			~? (count == 4) {
				return playerId;
			}
			~? (tempRow:c == symbol) {				
				count <~ count + 1;
			} ?~ {
				count <~ 0;
			}
			c <~ c + 1;
		}
		c <~ 0;
		r <~ r + 1;
	}
	# vertical
	r <~ 0;
	c <~ 0;
	count <~ 0;
	loop(c < columns) {
		loop(r < rows) {
			tempRow <~ board:r;
			~? (count == 4) {
				return playerId;
			}
			~? (tempRow:c == symbol) {				
				count <~ count + 1;
			} ?~ {
				count <~ 0;
			}
			r <~ r + 1;
		}
		r <~ 0;
		c <~ c + 1;
	}
	# diagonal
	r <~ 0;
	c <~ 0;
	count <~ 0;
	loop (r < (rows - 3)) {
		loop (c < (columns - 3)) {
			count <~ 0;
			*~ indexer <~ 0;
			*~ index <~ 0;
			loop (indexer < 4) {
				index <~ r + indexer;
				tempRow <~ board:index;
				index <~ c + indexer;
				~? (tempRow:index == symbol) {
					count <~ count + 1;
				}
				indexer <~ indexer + 1;
			}
			~? (count == 4) {
				return playerId;
			}
			c <~ c + 1;
		}
		c <~ 0;
		r <~ r + 1;
	}
	r <~ rows - 1;
	c <~ 0;
	count <~ 0;
	loop (r >= 3) {
		loop (c < (columns - 3)) {
			count <~ 0;
			*~ indexer <~ 0;
			*~ index <~ 0;
			loop (indexer < 4) {
				index <~ r - indexer;
				tempRow <~ board:index;
				index <~ c + indexer;
				~? (tempRow:index == symbol) {
					count <~ count + 1;
				}
				indexer <~ indexer + 1;
			}
			~? (count == 4) {
				return playerId;
			}
			c <~ c + 1;
		}
		c <~ 0;
		r <~ r - 1;
	}

	return 0;
});

fq columnInBoardHasSpace ~(board column {
	*~ tempRow <~ board:0;
	*~ ret <~ 0;
	~? (tempRow:column == ' ') { ret <~ 1; }
	return ret;
});

*~ player1Symbol <~ 'O';
*~ player2Symbol <~ 'X';
*~ currentPlayerName <~ '';
*~ currentPlayerSymbol <~ player1Symbol;
*~ currentPlayer <~ 1;
*~ currentboard <~ '';

*~ run <~ 1;
loop(run > 0) {
	currentboard <~ 
	[
		[' ', ' ', ' ', ' ', ' ', ' ', ' '],
		[' ', ' ', ' ', ' ', ' ', ' ', ' '],
		[' ', ' ', ' ', ' ', ' ', ' ', ' '],
		[' ', ' ', ' ', ' ', ' ', ' ', ' '],
		[' ', ' ', ' ', ' ', ' ', ' ', ' '],
		[' ', ' ', ' ', ' ', ' ', ' ', ' ']
	];
	*~ startPlayer <~ random:range(1, 2);
	currentPlayer <~ startPlayer;

	*~ winner <~ 0;

	console:writeln('--------| 4-Gewinnt |--------');
	console:write('Player 1: ');
	*~ player1Name <~ console:read();
	console:write('Player 2: ');
	*~ player2Name <~ console:read();

	loop(winner == 0) {
		~?(currentPlayer == 1) {
			currentPlayerName <~ player1Name;
			currentPlayerSymbol <~ player1Symbol;
		} ?~ {
			currentPlayerName <~ player2Name;
			currentPlayerSymbol <~ player2Symbol;
		}
		printBoard(currentboard);		
		console:writeln('Turn of ' + currentPlayerName + '(' + currentPlayerSymbol + '): ');

		*~ column <~ -1;
		*~ validInput <~ false;
		loop(validInput == false) {
			column <~ parser:toInt(console:read());
			validInput <~ true;
			~? ((column < 1) || (column > currentboard:len)) {
					validInput <~ false;
			} ?~ {
				~? (columnInBoardHasSpace(currentboard, column - 1) == 0) {
					validInput <~ false;
				}
			}
		}

		~? (currentPlayer == 1) {		
			dropInBoard(currentboard, column - 1, player1Symbol);
		} ?~ {
			dropInBoard(currentboard, column - 1, player2Symbol);
		}

		winner <~ checkIfWon(currentboard, currentPlayerSymbol, currentPlayer);
		~? (winner == 0) {
			~? (currentPlayer == 1) { currentPlayer <~ 2; } ?~ { currentPlayer <~ 1; }
		}
	}

	printBoard(currentboard);
	console:writeln("--------Winner--------", "DarkBlue");
	console:write("Congratulations:", "DarkBlue");
	console:writeln(currentPlayerName, "Blue");
	console:writeln("----------------------\n\n", "DarkBlue");
	
	console:write('Again? [y/n]: ');
	*~ input <~ console:read();
	~? ((input != 'y') && (input != 'Y')) {
		run <~ 0;
	}
}
